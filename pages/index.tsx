import { Inter } from "@next/font/google";
import Head from "next/head";
import {
  Address,
  ProviderRpcClient,
  TvmException,
} from "everscale-inpage-provider";
import { useEffect } from "react";
const inter = Inter({ subsets: ["latin"] });
const ever = new ProviderRpcClient();

async function myApp() {
  if (!(await ever.hasProvider())) {
    throw new Error("Extension is not installed");
  }

  const { accountInteraction } = await ever.requestPermissions({
    permissions: ["basic", "accountInteraction"],
  });
  if (accountInteraction == null) {
    throw new Error("Insufficient permissions");
  }

  const selectedAddress = accountInteraction.address;
  const dePoolAddress = new Address(
    "0:67aaa766eb4dfdabba221a79cdbad87d9f71ea8ad7b16ba3e0e9b26be415bf84"
  );
  // Connect with the Smart Contract:
  const dePool = new ever.Contract(DePoolAbi, dePoolAddress);
  const hello = new ever.Contract(helloWalletABI, new Address("0:c019797e94865581234eb9683d325f91e5f68e49851aa81613f461d54467debc"));
  console.log("Hello Contract",await hello.methods.renderHelloWorld().call());
  const transaction = await dePool.methods
    .addOrdinaryStake({
      stake: "10000000000",
    })
    .send({
      from: selectedAddress,
      amount: "2050000000",
      bounce: false,
    });
  console.log(transaction);

  try {
    const output = await dePool.methods
      .getParticipantInfo({
        addr: selectedAddress,
      })
      .call();
    console.log(output);
  } catch (e) {
    if (e instanceof TvmException) {
      console.error(e.code);
    }
  }
}
const helloWalletABI = {
  "ABI version": 2,
  header: ["time", "expire"],
  functions: [
    {
      name: "constructor",
      inputs: [],
      outputs: [],
    },
    {
      name: "renderHelloWorld",
      inputs: [],
      outputs: [{ name: "value0", type: "bytes" }],
    },
    {
      name: "touch",
      inputs: [],
      outputs: [],
    },
    {
      name: "getTimestamp",
      inputs: [],
      outputs: [{ name: "value0", type: "uint256" }],
    },
    {
      name: "sendValue",
      inputs: [
        { name: "dest", type: "address" },
        { name: "amount", type: "uint128" },
        { name: "bounce", type: "bool" },
      ],
      outputs: [],
    },
    {
      name: "timestamp",
      inputs: [],
      outputs: [{ name: "timestamp", type: "uint32" }],
    },
  ],
  data: [],
  events: [],
} as const;
const DePoolAbi = {
  "ABI version": 2,
  header: ["time", "expire"],
  functions: [
    {
      name: "addOrdinaryStake",
      inputs: [{ name: "stake", type: "uint64" }],
      outputs: [],
    },
    {
      name: "getParticipantInfo",
      inputs: [{ name: "addr", type: "address" }],
      outputs: [
        { name: "total", type: "uint64" },
        { name: "withdrawValue", type: "uint64" },
        { name: "reinvest", type: "bool" },
        { name: "reward", type: "uint64" },
        { name: "stakes", type: "map(uint64,uint64)" },
        {
          components: [
            { name: "remainingAmount", type: "uint64" },
            { name: "lastWithdrawalTime", type: "uint64" },
            { name: "withdrawalPeriod", type: "uint32" },
            { name: "withdrawalValue", type: "uint64" },
            { name: "owner", type: "address" },
          ],
          name: "vestings",
          type: "map(uint64,tuple)",
        },
        {
          components: [
            { name: "remainingAmount", type: "uint64" },
            { name: "lastWithdrawalTime", type: "uint64" },
            { name: "withdrawalPeriod", type: "uint32" },
            { name: "withdrawalValue", type: "uint64" },
            { name: "owner", type: "address" },
          ],
          name: "locks",
          type: "map(uint64,tuple)",
        },
        { name: "vestingDonor", type: "address" },
        { name: "lockDonor", type: "address" },
      ],
    },
  ],
  data: [],
  events: [],
} as const; // NOTE: `as const` is very important here

export default function Home() {
  useEffect(() => {}, []);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="test">welcome to blockchain world</div>
      <button onClick={() => myApp().catch(console.error)}>
        Connect Wallet & Tranfer some Ever tokens
      </button>
    </>
  );
}
